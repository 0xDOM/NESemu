#ifndef PPU_H
#define PPU_H 

#include "Cartridge.h"
#include "SDL.h"

class CPU;

class PPU {
public:
	PPU(Cartridge* c);
	
	uint8_t handleRead(uint16_t addr);
	void handleWrite(uint16_t addr, uint8_t value);
	void tick();
	
	void performDMA(uint8_t* addr);
	
	uint8_t pat[0x2000];
	
	CPU* _cpu;
	bool nmi;
	
private:
	Cartridge* _cartridge;
	
	
	uint16_t _baseNameTableAddress;	
	uint8_t _vramIncrement;
	uint16_t _spritePatternTableAddress;
	uint16_t _backgroundTableAddress;
	uint8_t _spriteHeight;
	bool _generateNmi;
	bool _showBackground;
	bool _showSprites;
	bool _spriteZeroHit;
	bool _ppuAddressFF;
	
	uint16_t _vAddress;
	
	void handlePpuCtrl(uint8_t value);
	void handlePpuMask(uint8_t value);
	void handlePpuAddress(uint8_t value);
	void handlePpuData(uint8_t value);
	uint8_t handlePpuStatus();
	void handleScrolling(uint8_t value);
	
	void flushScreen();
	void processPixel(uint8_t x, uint8_t y);
	
	uint8_t internalRead(uint16_t addy);

	void outputNameTables();

	
	bool _vBlank;
	int _scanline;
	uint16_t _x;
	
	uint8_t _vram[0x2000];
	uint8_t _oam[256];
	uint8_t _pal[32];
	uint8_t _oamAddress;
	
	uint8_t _scrollXcoarse;
	uint8_t _scrollXfine;
	uint16_t _scrollNt;
	uint8_t _scrollXcoarse_orig;
	uint8_t _scrollXfine_orig;
	uint16_t _scrollNt_orig;
	uint16_t _baseNameTableAddress_orig;
	
	bool _nextScrollX;
	uint8_t _readBuffer;
	
	
	uint32_t pixels[256*240];
	 SDL_Window *window;                    // Declare a pointer
	SDL_Renderer * renderer ;
	SDL_Texture * texture;

	SDL_Event event;


// debug

	uint32_t pixels2[256*240*2];
	 SDL_Window *window2;                    // Declare a pointer
	SDL_Renderer * renderer2 ;
	SDL_Texture * texture2;


	
	uint8_t pal[64][3] = 
	{{0x75, 0x75, 0x75},
{0x27, 0x1B, 0x8F},
{0x00, 0x00, 0xAB},
  {0x47, 0x00, 0x9F},
  {0x8F, 0x00, 0x77},
  {0xAB, 0x00, 0x13},
  {0xA7, 0x00, 0x00},
  {0x7F, 0x0B, 0x00},
  {0x43, 0x2F, 0x00},
  {0x00, 0x47, 0x00},
  {0x00, 0x51, 0x00},
  {0x00, 0x3F, 0x17},
  {0x1B, 0x3F, 0x5F},
  {0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00},
  {0xBC, 0xBC, 0xBC},
  {0x00, 0x73, 0xEF},
  {0x23, 0x3B, 0xEF},
  {0x83, 0x00, 0xF3},
  {0xBF, 0x00, 0xBF},
  {0xE7, 0x00, 0x5B},
  {0xDB, 0x2B, 0x00},
  {0xCB, 0x4F, 0x0F},
  {0x8B, 0x73, 0x00},
  {0x00, 0x97, 0x00},
  {0x00, 0xAB, 0x00},
  {0x00, 0x93, 0x3B},
  {0x00, 0x83, 0x8B},
  {0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00},
  {0xFF, 0xFF, 0xFF},
  {0x3F, 0xBF, 0xFF},
  {0x5F, 0x97, 0xFF},
  {0xA7, 0x8B, 0xFD},
  {0xF7, 0x7B, 0xFF},
  {0xFF, 0x77, 0xB7},
  {0xFF, 0x77, 0x63},
  {0xFF, 0x9B, 0x3B},
  {0xF3, 0xBF, 0x3F},
  {0x83, 0xD3, 0x13},
  {0x4F, 0xDF, 0x4B},
  {0x58, 0xF8, 0x98},
  {0x00, 0xEB, 0xDB},
  {0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00},
  {0xFF, 0xFF, 0xFF},
  {0xAB, 0xE7, 0xFF},
  {0xC7, 0xD7, 0xFF},
  {0xD7, 0xCB, 0xFF},
  {0xFF, 0xC7, 0xFF},
  {0xFF, 0xC7, 0xDB},
  {0xFF, 0xBF, 0xB3},
  {0xFF, 0xDB, 0xAB},
{0xFF, 0xE7, 0xA3},
  {0xE3, 0xFF, 0xA3},
  {0xAB, 0xF3, 0xBF},
  {0xB3, 0xFF, 0xCF},
  {0x9F, 0xFF, 0xF3},
  {0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00},
  {0x00, 0x00, 0x00}};
		
};

#endif